apply plugin: 'com.android.application'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    def versionPropsFile = file('version.properties')
    def vName = "_unknown_";

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def vCode = versionProps['VERSION_CODE'].toInteger()
        def vMajor = versionProps['VERSION_MAJOR'].toInteger()
        def vMinor = versionProps['VERSION_MINOR'].toInteger()
        def vSubMinor = versionProps['VERSION_SUBMINOR'].toInteger()
        def vBuild = versionProps['VERSION_BUILD'].toInteger()

        List<String> runTasks = gradle.startParameter.getTaskNames();

        def b_isassemble = false
        def assemble_type = "_unknown_"
        for (String rt : runTasks) {
            if (rt.contains("assemble")) {    //only rev. build and code numbers for assemble tasks
                b_isassemble = true
                vBuild++
                if (rt.contains("Debug")) {
                    assemble_type = "debug"
                } else if (rt.contains("Release")) {
                    assemble_type = "release"
                }
            }
        }
        vName = vMajor + "." + vMinor + "." + vSubMinor + "." + vBuild
        if (b_isassemble) {
            project.logger.lifecycle("Assembling new " + assemble_type + " version " + vName.toString())
        }

        versionProps['VERSION_CODE'] = vCode.toString()
        versionProps['VERSION_MAJOR'] = vMajor.toString()
        versionProps['VERSION_MINOR'] = vMinor.toString()
        versionProps['VERSION_SUBMINOR'] = vSubMinor.toString()
        versionProps['VERSION_BUILD'] = vBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        def base_archive_name = "tegolamobile"
        defaultConfig {
            applicationId "go_spatial.com.github.tegola.mobile.android"
            versionCode vCode
            versionName vName
            archivesBaseName = base_archive_name
            minSdkVersion 15
            targetSdkVersion 26
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def finalName = base_archive_name + "-" + vName + "-" + variant.buildType.name + ".apk";
                if (variant.buildType.name == "release") {  //only want to do this for releases
                    output.outputFile = new File(output.outputFile.parent, finalName)
                }
            }
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.0.0-alpha1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    testCompile 'junit:junit:4.12'
    compile project(':Controller')
}
